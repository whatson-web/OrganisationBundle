<?php

namespace WH\OrganisationBundle\Model;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * OrganisationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrganisationRepository extends EntityRepository
{


    public function getAll($page, $nbPerPage, $search = array()) {

        $qb = $this
            ->createQueryBuilder('Organisation')
            ->select('Organisation')
        ;


        //On y ajoute les conditions :
        foreach($search as $k => $v) {

            switch($k) {

                case 'search' :

                    $qb->add('where', $qb->expr()->orX(
                            $qb->expr()->like('Organisation.firstname', ':'.$k),
                            $qb->expr()->like('Organisation.lastname', ':'.$k),
                            $qb->expr()->like('Organisation.email', ':'.$k),
                            $qb->expr()->like('Organisation.socialReason', ':'.$k)

                        ));

                    $qb->setParameter($k, '%'.$v.'%');

                    break;

                case 'employeur' :

                    $qb->andWhere('Organisation.Employer = :idEmployeur');
                    $qb->setParameter('idEmployeur', $v);
                    break;


            }

        }

        $qb->getQuery();

        $qb
            // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage)
        ;

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($qb, true);



    }


    public function fournisseursQuery() {

        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->leftjoin('a.states', 's')
            ->where('s.level = 1100')
            ->orderBy('a.socialReason', 'ASC');

        ;

        return $qb;


    }


    public function getOneByStatus($status) {

        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->where('a.Status = :status')
            ->setParameter('status', $status)
            ->getQuery()

        ;

        return $qb->getSingleResult();


    }



}

